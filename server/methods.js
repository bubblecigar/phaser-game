const rooms = require('./state.js').rooms

exports.methods = {
  getRoomMethods: (roomId, io) => {
    const room = rooms.getRoomState(roomId)
    return {
      writePlayer: (playerState) => {
        const playerIndex = room.players.findIndex(player => player.id === playerState.id)
        if (playerIndex > -1) {
          room.players[playerIndex] = playerState
        } else {
          room.players.push(playerState)
        }
      },
      syncAllClients: (sceneKey) => {
        io.in(roomId).emit(sceneKey, 'syncServerStateToClient', room)
      },
      collectItem: (itemId) => {
        const itemIndex = room.items.findIndex(item => item.id === itemId)
        if (itemIndex < 0) {
          // already been collected by other player or the items may not be generated by server
        } else {
          // collect effect 
          room.items.splice(itemIndex, 1)
        }
      }
    }
  }
}